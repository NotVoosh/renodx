#include "../common.hlsl"

Texture2D<float4> t1 : register(t1);
Texture2D<float4> t0 : register(t0);
SamplerState s1_s : register(s1);
SamplerState s0_s : register(s0);
cbuffer cb0 : register(b0){
  float4 cb0[7];
}

float3 vanillaHBD(float3 color) {
  color = max(0, color - 0.004f);
  color = (color * (6.2f * color + 0.5f)) / (color * (6.2f * color + 1.7f) + 0.06f);
  return min(1.f, color * color); // gamma 2.0 pow + useless clamp
}

void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = t0.Sample(s0_s, v1.xy).xyzw;
  o0.w = r0.w;
  r0.xyz = r0.zxy * cb0[3].xxx;
   /*+ float3(-0.00400000019,-0.00400000019,-0.00400000019);
  r0.xyz = max(float3(0,0,0), r0.xyz);
  r1.xyz = r0.xyz * float3(6.19999981,6.19999981,6.19999981) + float3(0.5,0.5,0.5);
  r1.xyz = r1.xyz * r0.xyz;
  r2.xyz = r0.xyz * float3(6.19999981,6.19999981,6.19999981) + float3(1.70000005,1.70000005,1.70000005);
  r0.xyz = r0.xyz * r2.xyz + float3(0.0599999987,0.0599999987,0.0599999987);
  r0.xyz = r1.xyz / r0.xyz;
  r0.xyz = r0.xyz * r0.xyz;
  r0.xyz = min(float3(1,1,1), r0.xyz);*/
  float midGray = vanillaHBD(float3(0.18f, 0.18f, 0.18f)).x;
  float3 hueCorrectionColor = vanillaHBD(r0.yzx);
  renodx::tonemap::Config config = renodx::tonemap::config::Create();
  config.type = min(3, injectedData.toneMapType);
  config.peak_nits = injectedData.toneMapPeakNits;
  config.game_nits = injectedData.toneMapGameNits;
  config.gamma_correction = injectedData.toneMapGammaCorrection;
  config.exposure = injectedData.colorGradeExposure;
  config.highlights = injectedData.colorGradeHighlights;
  config.shadows = injectedData.colorGradeShadows;
  config.contrast = injectedData.colorGradeContrast;
  config.saturation = injectedData.colorGradeSaturation;
  config.reno_drt_dechroma = injectedData.colorGradeDechroma;
  config.reno_drt_blowout = 1.f - injectedData.colorGradeBlowout;
  config.mid_gray_value = midGray;
  config.mid_gray_nits = midGray * 100;
  config.reno_drt_contrast = 1.f;
  config.reno_drt_flare = 0.10f * pow(injectedData.colorGradeFlare, 10.f);
  config.hue_correction_type = injectedData.toneMapPerChannel != 0.f ? renodx::tonemap::config::hue_correction_type::INPUT
                                                                     : renodx::tonemap::config::hue_correction_type::CUSTOM;
  config.hue_correction_strength = injectedData.toneMapHueCorrection;
  config.hue_correction_color = lerp(r0.yzx, hueCorrectionColor, injectedData.toneMapHueShift);
  config.reno_drt_hue_correction_method = (int)injectedData.toneMapHueProcessor;
  config.reno_drt_tone_map_method = injectedData.toneMapType == 3.f ? renodx::tonemap::renodrt::config::tone_map_method::REINHARD
                                                                    : renodx::tonemap::renodrt::config::tone_map_method::DANIELE;
  config.reno_drt_per_channel = injectedData.toneMapPerChannel != 0.f;
  config.reno_drt_white_clip = injectedData.colorGradeClip == 0.f ? 100.f : injectedData.colorGradeClip;
  if (injectedData.toneMapType == 0.f) {
    r0.yzx = hueCorrectionColor;
  }
   if(injectedData.colorGradeLUTStrength == 0.f || config.type == 1.f) {
    r0.xyz = renodx::tonemap::config::Apply(r0.yzx, config);
    } else {
    renodx::tonemap::config::DualToneMap tone_maps = renodx::tonemap::config::ApplyToneMaps(r0.yzx, config);
      float3 hdrColor = tone_maps.color_hdr;
      float3 sdrColor = tone_maps.color_sdr;
      r0.yzx = sdrColor;
  if(injectedData.colorGradeLUTSampling == 0.f){
  r0.yzw = cb0[6].zzz * saturate(r0.xyz);
  r1.xy = float2(0.5,0.5) * cb0[6].xy;
  r1.yz = r0.zw * cb0[6].xy + r1.xy;
  r0.y = floor(r0.y);
  r1.x = r0.y * cb0[6].y + r1.y;
  r0.x = saturate(r0.x) * cb0[6].z + -r0.y;
  r2.x = cb0[6].y;
  r2.y = 0;
  r0.yz = r2.xy + r1.xz;
  r1.xyzw = t1.Sample(s1_s, r1.xz).xyzw;
  r2.xyzw = t1.Sample(s1_s, r0.yz).xyzw;
  r0.yzw = r2.xyz + -r1.xyz;
  r0.xyz = r0.xxx * r0.yzw + r1.xyz;
  } else {
    r0.xyz = renodx::lut::SampleTetrahedral(t1, r0.yzx, cb0[6].z + 1u);
  }
    r0.xyz = RestoreSaturationLoss(sdrColor, r0.xyz);
    if (config.type == 0.f) {
    r0.xyz = lerp(sdrColor, r0.xyz, injectedData.colorGradeLUTStrength);
    } else {
    r0.xyz = renodx::tonemap::UpgradeToneMap(hdrColor, sdrColor, r0.xyz, injectedData.colorGradeLUTStrength);
  }
  }
  if (injectedData.countOld == injectedData.countNew) {
    r0.xyz = PostToneMapScale(r0.xyz);
  }
  o0.xyz = r0.xyz;
  return;
}