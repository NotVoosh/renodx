Texture2D<float4> t12 : register(t12);
Texture2D<float4> t6 : register(t6);
Texture2D<float4> t5 : register(t5);
Texture2D<float4> t4 : register(t4);
Texture2D<float4> t3 : register(t3);
Texture2D<float4> t2 : register(t2);
Texture2D<float4> t1 : register(t1);
Texture2D<float4> t0 : register(t0);
SamplerState s12_s : register(s12);
SamplerState s6_s : register(s6);
SamplerState s5_s : register(s5);
SamplerState s4_s : register(s4);
SamplerState s3_s : register(s3);
SamplerState s2_s : register(s2);
SamplerState s1_s : register(s1);
SamplerState s0_s : register(s0);
cbuffer cb0 : register(b0){
  float4 cb0[32];
}

#define cmp -

void main(
  float4 v0 : TEXCOORD0,
  float4 v1 : TEXCOORD1,
  float3 v2 : TEXCOORD2,
  float w2 : TEXCOORD4,
  float4 v3 : TEXCOORD3,
  float4 v4 : TEXCOORD5,
  float4 v5 : SV_POSITION0,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = cb0[9].yx * cb0[1].xx;
  r0.xy = frac(r0.xy);
  r0.x = r0.x * 2 + -1;
  r0.z = cb0[9].w + -cb0[9].z;
  r0.x = abs(r0.x) * r0.z + cb0[9].z;
  r1.z = v0.y * r0.x + r0.y;
  r1.x = v0.x * r0.x;
  r0.xy = t2.Sample(s2_s, r1.xz).xy;
  r0.xy = r0.xy * float2(2,2) + float2(-1,-1);
  r0.zw = cb0[10].yx * cb0[1].xx;
  r0.zw = frac(r0.zw);
  r0.z = r0.z * 2 + -1;
  r1.x = cb0[10].w + -cb0[10].z;
  r0.z = abs(r0.z) * r1.x + cb0[10].z;
  r1.z = v0.y * r0.z + r0.w;
  r1.x = v0.x * r0.z;
  r0.zw = t3.Sample(s3_s, r1.xz).xy;
  r0.xy = r0.zw * float2(2,2) + r0.xy;
  r0.xy = float2(-1,-1) + r0.xy;
  r0.zw = cb0[11].xx * r0.xy;
  r1.xy = cb0[7].yx * cb0[1].xx;
  r1.xy = frac(r1.xy);
  r1.x = r1.x * 2 + -1;
  r1.z = cb0[7].w + -cb0[7].z;
  r1.x = abs(r1.x) * r1.z + cb0[7].z;
  r2.z = v0.y * r1.x + r1.y;
  r2.x = v0.x * r1.x;
  r1.x = cb0[8].x * cb0[1].x + -0.5;
  r1.x = frac(r1.x);
  r1.yz = r0.zw * r1.xx + r2.xz;
  r1.y = t1.Sample(s1_s, r1.yz).y;
  r1.z = cb0[8].x * cb0[1].x;
  r1.z = frac(r1.z);
  r0.zw = r1.zz * r0.zw + r2.xz;
  r0.z = t1.Sample(s1_s, r0.zw).y;
  r0.w = r1.y + -r0.z;
  r1.y = r1.z * 2 + -1;
  r0.z = abs(r1.y) * r0.w + r0.z;
  r2.xyz = cb0[6].xyz + -cb0[5].xyz;
  r2.xyz = r0.zzz * r2.xyz + cb0[5].xyz;
  r0.z = 0.0500000007 + r0.z;
  r0.z = saturate(2.03593016 * r0.z);
  r3.xyzw = t6.Sample(s6_s, v0.zw).xyzw;
  r0.w = dot(r3.xyzw, float4(1,1,1,1));
  r1.w = cmp(0 < r0.w);
  r4.x = cmp(r0.w < 0);
  r1.w = (int)-r1.w + (int)r4.x;
  r1.w = (int)r1.w;
  r4.x = cmp(r1.w != 0.000000);
  r1.w = 9.99999991e-38 * r1.w;
  r1.w = r4.x ? r1.w : 9.99999991e-38;
  r4.x = cmp(9.99999991e-38 < abs(r0.w));
  r1.w = r4.x ? r0.w : r1.w;
  r0.w = min(1, r0.w);
  r0.w = 1 + -r0.w;
  r3.xyzw = r3.xyzw / r1.wwww;
  r2.w = 1;
  r4.x = dot(cb0[4].xyzw, r2.xyzw);
  r4.y = dot(cb0[12].xyzw, r2.xyzw);
  r4.z = dot(cb0[13].xyzw, r2.xyzw);
  r4.w = dot(cb0[14].xyzw, r2.xyzw);
  r4.x = dot(r4.xyzw, r3.xyzw);
  r5.x = dot(cb0[15].xyzw, r2.xyzw);
  r5.y = dot(cb0[16].xyzw, r2.xyzw);
  r5.z = dot(cb0[17].xyzw, r2.xyzw);
  r5.w = dot(cb0[18].xyzw, r2.xyzw);
  r4.y = dot(r5.xyzw, r3.xyzw);
  r5.x = dot(cb0[19].xyzw, r2.xyzw);
  r5.y = dot(cb0[20].xyzw, r2.xyzw);
  r5.z = dot(cb0[21].xyzw, r2.xyzw);
  r5.w = dot(cb0[22].xyzw, r2.xyzw);
  r4.z = dot(r5.xyzw, r3.xyzw);
  r2.xyz = -r4.xyz + r2.xyz;
  r2.xyz = r0.www * r2.xyz + r4.xyz;
  r0.w = r0.z * -2 + 3;
  r0.z = r0.z * r0.z;
  r3.w = r0.w * r0.z;
  r2.xyz = r3.www * r2.xyz;
  r3.xyz = cb0[23].xxx * r2.xyz;
  r2.xyzw = cb0[24].xxxx * r3.xyzw;
  r0.z = t4.Sample(s4_s, v1.xy).x;
  r0.w = cb0[25].y + -cb0[25].x;
  r0.z = r0.z * r0.w + cb0[25].x;
  r0.xy = r0.xy * r0.zz;
  r0.xy = cb0[26].xx * r0.xy;
  r0.zw = r0.xy * r1.xx + v0.zw;
  r0.xy = r0.xy * r1.zz + v0.zw;
  r0.x = t0.Sample(s0_s, r0.xy).y;
  r0.y = t0.Sample(s0_s, r0.zw).y;
  r0.y = r0.y + -r0.x;
  r0.x = abs(r1.y) * r0.y + r0.x;
  r0.y = dot(v3.xyz, v2.xyz);
  r0.y = min(1, abs(r0.y));
  r0.y = 1 + -r0.y;
  r0.zw = cmp(float2(9.99999991e-38,0) < r0.yy);
  r0.w = (int)-r0.w;
  r1.x = cmp(r0.w != 0.000000);
  r0.w = 9.99999991e-38 * r0.w;
  r0.w = r1.x ? r0.w : 9.99999991e-38;
  r0.y = r0.z ? r0.y : r0.w;
  r0.y = log2(r0.y);
  r0.z = cb0[28].x * r0.y;
  r0.y = cb0[29].x * r0.y;
  r0.y = exp2(r0.y);
  r0.y = 1 + -r0.y;
  r0.y = max(0, r0.y);
  r0.z = exp2(r0.z);
  r1.xy = cb0[2].xx + v5.xy;
  r1.xy = cb0[0].xy * r1.xy;
  r0.w = t12.Sample(s12_s, r1.xy).x;
  r0.w = r0.w * cb0[0].w + -cb0[0].z;
  r0.w = -w2.x + r0.w;
  r0.w = saturate(r0.w / cb0[27].x);
  r1.x = r0.w * -2 + 3;
  r0.w = r0.w * r0.w;
  r0.w = -r1.x * r0.w + 1;
  r0.w = max(0, r0.w);
  r0.z = r0.w + r0.z;
  r0.z = saturate(r0.x + r0.z);
  r0.x = saturate(r0.x);
  r1.xyzw = r2.xyzw * r0.zzzz;
  r2.xy = cmp(float2(9.99999991e-38,0) < r0.ww);
  r0.z = (int)-r2.y;
  r2.y = cmp(r0.z != 0.000000);
  r0.z = 9.99999991e-38 * r0.z;
  r0.z = r2.y ? r0.z : 9.99999991e-38;
  r0.z = r2.x ? r0.w : r0.z;
  r0.z = log2(r0.z);
  r0.z = 30 * r0.z;
  r0.z = exp2(r0.z);
  r0.z = 1 + -r0.z;
  r2.xy = cmp(float2(9.99999991e-38,0) < r0.yy);
  r0.w = (int)-r2.y;
  r2.y = cmp(r0.w != 0.000000);
  r0.w = 9.99999991e-38 * r0.w;
  r0.w = r2.y ? r0.w : 9.99999991e-38;
  r0.y = r2.x ? r0.y : r0.w;
  r0.y = log2(r0.y);
  r0.y = cb0[30].x * r0.y;
  r0.y = exp2(r0.y);
  r0.y = r0.y * r0.z;
  r1.xyzw = r1.xyzw * r0.yyyy;
  r0.xyzw = r1.xyzw * r0.xxxx;
  r0.xyzw = cb0[31].xxxx * r0.xyzw;
  r1.x = t5.Sample(s5_s, v1.zw).x;
  r0.xyzw = r1.xxxx * r0.xyzw;
  r1.x = 1 + -v4.w;
  o0.xyzw = r1.xxxx * r0.xyzw;
  o0 = max(0.f, o0);
  return;
}